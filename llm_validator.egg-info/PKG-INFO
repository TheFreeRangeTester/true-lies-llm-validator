Metadata-Version: 2.4
Name: llm-validator
Version: 0.1.0
Summary: Library to validate chatbot responses
Author-email: Pato Miner <patominer@gmail.com>
Keywords: chatbot,validation,testing,LLM
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: nltk

# LLM Validator

Una librer√≠a Python para validar respuestas de LLMs (Large Language Models) contra datos de referencia, con validaci√≥n factual, sem√°ntica y de polaridad.

## üöÄ Caracter√≠sticas Principales

- **Validaci√≥n Factual**: Extrae y valida campos espec√≠ficos de las respuestas del LLM
- **Validaci√≥n Sem√°ntica**: Compara similitud sem√°ntica con texto de referencia
- **Validaci√≥n de Polaridad**: Verifica que el tono/actitud sea consistente
- **Mapeo Sem√°ntico**: Soporte para sin√≥nimos y t√©rminos espec√≠ficos del dominio
- **Configuraci√≥n Flexible**: Campos personalizables y patrones de extracci√≥n
- **M√∫ltiples Dominios**: Seguros, motocicletas, retail, banca y m√°s

## üì¶ Instalaci√≥n

```bash
pip install llm-validator
```

## üéØ Uso R√°pido

### Concepto de "Facts"

Los **facts** son los valores que **SI O SI** deben estar presentes en la respuesta del LLM. Estos se expanden autom√°ticamente usando el **semantic mapping** para incluir sin√≥nimos y variaciones.

**Ejemplo:**
- **Fact**: `"coverage_type": "auto insurance"`
- **Semantic Mapping**: `"auto insurance": ["car insurance", "automobile insurance"]`
- **Resultado**: El sistema buscar√° "auto insurance", "car insurance" o "automobile insurance" en el candidate

### API Simplificada (Recomendada)

```python
from llm_validator.runner import validate_llm_response

# 1. FACTS - Los valores que SI O SI deben estar en el candidate
facts = {
    "policy_number": "POL-2024-001",
    "premium": "$850.00",
    "coverage_type": "auto insurance",
    "liability_limit": "$100,000",
    "expiry_date": "December 31, 2024"
}

# 2. REFERENCE TEXT - Texto de referencia para comparaci√≥n sem√°ntica
reference_text = "Your auto insurance policy #POL-2024-001 has a premium of $850.00 per month..."

# 3. SEMANTIC MAPPING - Sin√≥nimos que expanden los facts para validaci√≥n
semantic_mapping = {
    "auto insurance": ["car insurance", "automobile insurance"],
    "liability": ["liability coverage", "liability protection"],
    "premium": ["monthly payment", "monthly cost"]
}

# 4. CANDIDATES - Respuestas del LLM a validar
candidates = [
    "Policy POL-2024-001 covers your automobile with monthly payments of $850.00...",
    "Your car insurance policy POL-2024-001 costs $850 monthly...",
    "Auto policy #POL-2024-001 has a $850.00 monthly premium..."
]

# 5. VALIDAR
results = validate_llm_response(
    facts=facts,
    reference_text=reference_text,
    candidates=candidates,
    semantic_mapping=semantic_mapping,
    threshold=0.7
)
```

## üîß Configuraciones Avanzadas

### Usando Dominios Predefinidos

```python
# Usar mapeo sem√°ntico basado en dominio
results = validate_llm_response(
    facts=facts,
    reference_text=reference_text,
    candidates=candidates,
    domain="insurance",  # Carga semantic_data/insurance.json
    threshold=0.7
)
```

### Configuraci√≥n de Campos Personalizada

```python
# Configuraci√≥n personalizada para extracci√≥n de campos
field_configs = {
    "stock": {
        "name": "stock",
        "patterns": [
            r'(\d+)\s+units?\s+available',
            r'in\s+stock\s+with\s+(\d+)',
            r'we\s+have\s+(\d+)\s+units?'
        ]
    }
}

results = validate_llm_response(
    facts=facts,
    reference_text=reference_text,
    candidates=candidates,
    field_configs=field_configs,
    threshold=0.7
)
```

## üìä Resultados

La funci√≥n devuelve un diccionario con informaci√≥n detallada:

```python
{
    "total_candidates": 3,
    "factual_pass": 1,
    "fully_valid": 1,
    "success_rate": 33.3,
    "results": [
        {
            "index": 1,
            "candidate": "...",
            "factual": {"is_valid": True, "details": {...}},
            "semantic": {
                "similarity_score": 0.85,
                "token_score": 0.90,
                "seq_score": 0.80,
                "semantic_boost": 0.05,
                "is_valid": True
            },
            "polarity": {"polarity_match": True, ...},
            "is_valid": True
        }
    ],
    "facts": {...},  # Los facts originales que se validaron
    "reference_text": "..."
}
```

## üèóÔ∏è Dominios Soportados

### Seguros (`insurance`)
- `policy_number`: N√∫meros de p√≥liza
- `premium`: Primas mensuales
- `coverage_type`: Tipos de cobertura
- `liability_limit`: L√≠mites de responsabilidad
- `expiry_date`: Fechas de expiraci√≥n

### Motocicletas (`motorcycle_dealership`)
- `motorcycle_model`: Modelos de motocicletas
- `price`: Precios
- `mileage`: Kilometraje
- `warranty`: Garant√≠as
- `condition`: Condici√≥n

### Retail (`retail`)
- `product_name`: Nombres de productos
- `stock`: Inventario
- `price`: Precios
- `color`: Colores

### Banca (`banking`)
- `account_type`: Tipos de cuenta
- `balance`: Saldos
- `interest_rate`: Tasas de inter√©s
- `account_number`: N√∫meros de cuenta

## üé® Ejemplos Completos

### Ejemplo: Validaci√≥n de Seguros

```python
from llm_validator.runner import validate_llm_response

# Configuraci√≥n para seguros
facts = {
    "policy_number": "POL-2024-001",
    "premium": "$850.00",
    "coverage_type": "auto insurance",
    "liability_limit": "$100,000",
    "expiry_date": "December 31, 2024"
}

reference_text = "Your auto insurance policy #POL-2024-001 has a premium of $850.00 per month..."

semantic_mapping = {
    "auto insurance": ["car insurance", "automobile insurance"],
    "liability": ["liability coverage", "liability protection"],
    "comprehensive": ["comprehensive coverage", "full coverage"],
    "premium": ["monthly payment", "monthly cost"],
    "policy": ["insurance policy", "coverage policy"]
}

candidates = [
    "Policy POL-2024-001 covers your automobile with monthly payments of $850.00...",
    "Your car insurance policy POL-2024-001 costs $850 monthly...",
    "Auto policy #POL-2024-001 has a $850.00 monthly premium..."
]

results = validate_llm_response(
    facts=facts,
    reference_text=reference_text,
    candidates=candidates,
    semantic_mapping=semantic_mapping,
    threshold=0.7
)
```

### Ejemplo: Validaci√≥n de Inventario

```python
# Configuraci√≥n para motocicletas
facts = {
    "motorcycle_model": "Honda CBR 600RR",
    "price": "$12,500",
    "mileage": "1500",
    "warranty": "6-month",
    "condition": "excellent"
}

reference_text = "The Honda CBR 600RR is available for $12,500..."

results = validate_llm_response(
    facts=facts,
    reference_text=reference_text,
    candidates=candidates,
    domain="motorcycle_dealership",  # Usa mapeo predefinido
    threshold=0.7
)
```

## üîç Validaci√≥n Sem√°ntica Mejorada

La validaci√≥n sem√°ntica incluye:

- **Token Overlap**: Comparaci√≥n de tokens normalizados
- **Sequence Similarity**: Similitud de secuencia usando difflib
- **Semantic Boost**: Bonus por coincidencias de sin√≥nimos
- **Weighted Scoring**: Peso mayor para tokens de hechos clave

### Scoring Sem√°ntico

```python
# Pesos de tokens:
# - Tokens de hechos (facts): peso 3.0
# - Sin√≥nimos sem√°nticos: peso 2.0  
# - Otros tokens: peso 1.0

# Score final = (token_score + seq_score) / 2 + semantic_boost
```

## üîß API Individual

### validate_all()

Para validar un solo candidate con todos los tipos de validaci√≥n:

```python
from llm_validator import validate_all

# Facts que SI O SI deben estar en el candidate
facts = {
    "policy_number": "POL-2024-001",
    "premium": "$850.00",
    "coverage_type": "auto insurance"
}

reference_text = "Your auto insurance policy #POL-2024-001 has a premium of $850.00"

candidate = "Policy POL-2024-001 covers your automobile with monthly payments of $850.00"

# Semantic mapping para expandir los facts
semantic_mapping = {
    "auto insurance": ["car insurance", "automobile insurance"],
    "premium": ["monthly payment", "monthly cost"]
}

result = validate_all(
    candidate_text=candidate,
    facts=facts,  # ‚úÖ Usa 'facts' en lugar de 'reference_values'
    reference_text=reference_text,
    semantic_mapping=semantic_mapping,
    threshold=0.7
)
```

## üõ†Ô∏è API Legacy

Para compatibilidad con versiones anteriores:

```python
from llm_validator.runner import run_validation_scenario

results = run_validation_scenario(
    scenario_name="insurance_policy",
    reference_text=reference_text,
    reference_values=facts,
    candidates=candidates,
    threshold=0.7,
    domain="insurance"
)
```

## üìÅ Estructura del Proyecto

```
llm_validator/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ core.py              # Funciones principales de validaci√≥n
‚îú‚îÄ‚îÄ runner.py            # API de ejecuci√≥n y reportes
‚îú‚îÄ‚îÄ utils.py             # Utilidades y extracci√≥n de campos
‚îî‚îÄ‚îÄ semantic_data/       # Mapeos sem√°nticos por dominio
    ‚îú‚îÄ‚îÄ insurance.json
    ‚îú‚îÄ‚îÄ motorcycle_dealership.json
    ‚îú‚îÄ‚îÄ retail.json
    ‚îî‚îÄ‚îÄ banking.json
```

## ü§ù Contribuir

1. Fork el repositorio
2. Crea una rama para tu feature (`git checkout -b feature/AmazingFeature`)
3. Commit tus cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abre un Pull Request

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.

## üÜï Changelog

### v0.2.0 - API Mejorada
- ‚úÖ Nueva funci√≥n `validate_llm_response()` m√°s intuitiva
- ‚úÖ Par√°metro `facts` en lugar de `reference_values` para mayor claridad
- ‚úÖ Soporte mejorado para mapeos sem√°nticos que expanden los facts
- ‚úÖ Scoring sem√°ntico con boost por sin√≥nimos
- ‚úÖ Mejor formato de resultados con emojis
- ‚úÖ Configuraciones de campos personalizables
- ‚úÖ Dominios predefinidos para diferentes industrias

### v0.1.0 - Versi√≥n Inicial
- ‚úÖ Validaci√≥n factual b√°sica
- ‚úÖ Validaci√≥n sem√°ntica
- ‚úÖ Validaci√≥n de polaridad
- ‚úÖ API legacy con `run_validation_scenario()`
